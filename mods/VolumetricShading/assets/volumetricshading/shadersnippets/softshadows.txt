#if SHADOWQUALITY > 1 && VSMOD_SOFTSHADOWS > 0
#define VSMOD_LIGHT_SIZE 0.75
#define VSMOD_NEAR_PLANE 1

float vsmod_penumbraSize(float zReceiver, float zBlocker) {
    return max((zReceiver - zBlocker) / zBlocker, shadowMapWidthInv*50);
}

vec2 vsmod_vogelDiskFast(int sampleIndex, float samplesSqrt, float phi)
{
    float GoldenAngle = 2.4f;

    float r = sqrt(sampleIndex + 0.5f) / samplesSqrt;
    float theta = sampleIndex * GoldenAngle + phi;

    float sine = sin(theta);
    float cosine = cos(theta);

    return vec2(r * cosine, r * sine);
}

vec2 vsmod_vogelDiskSample(int sampleIndex, int samplesCount, float phi)
{
    return vsmod_vogelDiskFast(sampleIndex, sqrt(samplesCount), phi);
}

float vsmod_interleavedGradientNoise()
{
    vec3 magic = vec3(0.06711056f, 0.00583715f, 52.9829189f);
    return fract(magic.z * fract(dot(gl_FragCoord.xy, magic.xy)));
}

void vsmod_findBlocker(vec3 coords, float seed, float bias, out float avgBlockerDepth, out float numBlockers) {
    const int samples = 12;
    float samplesSqrt = sqrt(samples);

    float searchWidth = VSMOD_LIGHT_SIZE / shadowRangeNear * (coords.z - VSMOD_NEAR_PLANE) / coords.z;
    float clipNear = coords.z - bias * abs(searchWidth);
    float blockerSum = 0;
    float myNumBlockers = 0;

    for (int i = 0; i < samples; i++) {
        vec2 coord = coords.xy + vsmod_vogelDiskFast(i, samplesSqrt, seed) * searchWidth;
        float smap = texture(shadowMapNearTex, coord).r;
        float sumVal = smap < clipNear ? 1.0f : 0.0f;
        blockerSum += sumVal * smap;
        myNumBlockers += sumVal;
    }

    avgBlockerDepth = blockerSum / myNumBlockers;
    numBlockers = myNumBlockers;
}

float vsmod_pcf(vec3 coords, float filterRadius, float seed) {
    float samplesSqrt = sqrt(VSMOD_SOFTSHADOWSAMPLES);

    float sum = 0.0f;
    for (int i = 0; i < VSMOD_SOFTSHADOWSAMPLES; i++)
    {
        vec2 offset = vsmod_vogelDiskFast(i, samplesSqrt, seed) * filterRadius;
        sum += texture(shadowMapNear, vec3(coords.xy + offset, coords.z - 0.0005 + (0.0001 * VSMOD_NEARSHADOWOFFSET)));
    }

    return sum / VSMOD_SOFTSHADOWSAMPLES;
}

float vsmod_pcss_impl(vec3 coords, float bias) {
    float avgBlockerDepth = 0;
    float numBlockers = 0;
    float seed = vsmod_interleavedGradientNoise() * 3.14159265f * 2.0f;

    vsmod_findBlocker(coords, seed, bias, avgBlockerDepth, numBlockers);
    if (numBlockers < 1)
        return 1.0f;

    float penumbraRatio = vsmod_penumbraSize(coords.z, avgBlockerDepth);
    float filterRadiusUV = penumbraRatio * VSMOD_LIGHT_SIZE / shadowRangeNear * VSMOD_NEAR_PLANE / coords.z;

    return vsmod_pcf(coords, filterRadiusUV, seed);
}

float vsmod_pcss(vec3 coords) {
    return vsmod_pcss_impl(coords, 0.0005);
}

float vsmod_pcss_sloped(vec3 coords, vec3 normal) {
    float cosTheta = dot(normal, lightPosition);
    if (cosTheta < 0)
        return 0.0f;
    
    float bias = 0.2 * tan(acos(cosTheta));
    bias = clamp(bias, 0.0, 0.15);

    return vsmod_pcss_impl(coords, bias);
}
#endif